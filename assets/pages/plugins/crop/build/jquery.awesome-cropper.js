// Generated by CoffeeScript 1.6.3
(function () {
    var $;

    $ = jQuery;

    $.awesomeCropper = function (inputAttachTo, options) {
        var $applyButton, $cancelButton, $container, $cropSandbox, $fileSelect, $imagesContainer, $inputAttachTo, $progressBar, $resultIm, $sourceIm, $urlSelect, $urlSelectButton, a, cleanImages, div, drawImage, fileAllowed, handleDragOver, handleDropFileSelect, handleFileSelect, image, input, log, readFile, removeAreaSelect, removeLoading, saveCrop, setAreaSelect, setImages, setLoading, setOriginalSize, settings;
        settings = {
            width: 100,
            height: 100,
            debug: false
        };
        settings = $.extend(settings, options);
        log = function () {
            if (settings.debug) {
                return typeof console !== "undefined" && console !== null ? console.log(arguments) : void 0;
            }
        };
        $inputAttachTo = $(inputAttachTo);
        input = function (type) {
            return $("<input type = \"" + type + "\" id = \"" + settings.id + "\" style='display:none;'/>");
        };
        div = function () {
            return $("<div/>");
        };
        a = function (text) {
            return $("<a href=\"#\">" + text + "</a>");
        };
        image = function () {
            return $('<img  id = \'' + settings.id + '\'/>');
        };
        $container = div().insertAfter($inputAttachTo).addClass('awesome-cropper');
        $cropSandbox = $('<canvas class="canvas-img" id="canvas_' + settings.id + '" style="position:relative; right:0px;"></canvas><canvas id="blank_' + settings.id + '" style="display:none"></canvas>');
        $cropSandbox.attr({
            width: settings.width,
            height: settings.height
        });
        $container.append($cropSandbox);
        $fileSelect = input('file');
        $container.append($fileSelect);
        if (settings.proxy_path !== void 0) {
            $urlSelect = input('text');
            $urlSelectButton = input('button');
            $urlSelectButton.val('Upload from url');
            $container.append(div().addClass('form-group').append($urlSelect).append($urlSelectButton));
        }
        $progressBar = div().addClass('progress hide').append(div().addClass('progress-bar').attr({
            role: 'progressbar',
            'aria-valuenow': "60",
            'aria-valuemin': "0",
            'aria-valuemax': "100",
            style: "width: 60%;"
        }));
        $container.append($progressBar);
        $resultIm = image();
        $container.append($resultIm);
        $sourceIm = image();
        $applyButton = a('Apply').addClass('btn yes btn-primary btn-apply').attr({
            'href': 'javascript:void(0);'
        });
        ;
        $cancelButton = a('Cancel').addClass('btn btn-danger').attr({
            'data-dismiss': "modal",
            'href': 'javascript:void(0);'
        });
        $imagesContainer = div().append(div().addClass('modal-dialog').append(div().addClass('modal-content').append(div().addClass('modal-body').append(div().addClass('col-md-9').append($sourceIm)).append(div().addClass('col-md-3').append($cropSandbox)).append(div().addClass('clearfix')), div().addClass('modal-footer').append(div().addClass('btn-group').append($cancelButton).append($applyButton))))).addClass('modal').attr({
            role: 'dialog'
        });
        $container.append($imagesContainer);
        removeAreaSelect = function (image) {
            return image.imgAreaSelect({
                remove: true
            });
        };
        cleanImages = function () {
            var im;
            removeAreaSelect($sourceIm);
            im = $sourceIm;
            $sourceIm = image();
            /* Code added by Vishal Panchal [ BYPT ] */
            var canvas = document.getElementById("canvas_" + settings.id + "");
            var context = canvas.getContext('2d');
            context.setTransform(1, 0, 0, 1, 0, 0);
	    context.clearRect(0, 0, canvas.width, canvas.height);
            // Restore the transform
	    context.restore();
            /* Code ended by Vishal Panchal [ BYPT ] */
            return im.replaceWith($sourceIm);
            //return im.replaceWith($sourceIm);
        };
        setLoading = function () {
            return $progressBar.removeClass('hide');
        };
        removeLoading = function () {
            $imagesContainer.on('shown.bs.modal', function () {
                return setAreaSelect($sourceIm);
            }).on('hidden.bs.modal', function () {
                return cleanImages();
            }).modal();
            return $progressBar.addClass('hide');
        };
        setOriginalSize = function (img) {
            var tempImage;
            tempImage = new Image();
            tempImage.onload = function () {
                return img.attr({
                    'data-original-width': tempImage.width,
                    'data-original-height': tempImage.height
                });
            };
            return tempImage.src = img.attr('src');
        };
        setImages = function (uri) {
            return $sourceIm.attr('src', uri).load(function () {
                removeLoading();
                return setOriginalSize($sourceIm);
            });
        };
        drawImage = function (img, x, y, width, height) {
            var context, destHeight, destWidth, destX, destY, oHeight, oWidth, r, sourceHeight, sourceWidth, sourceX, sourceY;
            oWidth = img.attr('data-original-width');
            oHeight = img.attr('data-original-height');
            if (oWidth > oHeight) {
                r = oHeight / img.height();
            } else {
                r = oWidth / img.width();
            }
            sourceX = Math.round(x * r);
            sourceY = Math.round(y * r);
            sourceWidth = Math.round(width * r);
            sourceHeight = Math.round(height * r);
            destX = 0;
            destY = 0;
            destWidth = settings.width;
            destHeight = settings.height;
            context = $cropSandbox.get(0).getContext('2d');
            return context.drawImage(img.get(0), sourceX, sourceY, sourceWidth, sourceHeight, destX, destY, destWidth, destHeight);
        };
        setAreaSelect = function (image) {
            var viewPort, x2, y2,
                    _this = this;
            //viewPort = $(window).height() - 150;
            viewPort = $(window).height() - 350;
            if ($sourceIm.height() > viewPort) {
                $sourceIm.css({
                    height: viewPort + "px"
                });
            }
            log(image.width(), image.height());
            if (image.width() / settings.width >= image.height() / settings.height) {
                y2 = image.height();
                x2 = Math.round(settings.width * (image.height() / settings.height));
            } else {
                x2 = image.width();
                y2 = Math.round(settings.height * (image.width() / settings.width));
            }
            log(x2, y2, image.width(), image.height());
            drawImage($sourceIm, 0, 0, x2 - 1, y2 - 1);
            return image.imgAreaSelect({
                aspectRatio: "" + settings.width + ":" + settings.height,
                handles: true,
                x1: 0,
                y1: 0,
                x2: x2,
                y2: y2,
				index:settings.id,
                onSelectEnd: function (img, selection) {
                    return drawImage($sourceIm, selection.x1, selection.y1, selection.width - 1, selection.height - 1);
                }
            });
        };
        fileAllowed = function (name) {
            var res;
            res = name.match(/\.(jpg|png|gif|jpeg)$/mi);
            if (!res) {
                alert('Only *.jpeg, *.jpg, *.png, *.gif files allowed');
                return false;
            } else {
                return true;
            }
        };
        readFile = function (file) {
            var reader;
            reader = new FileReader();
            setLoading();
            reader.onload = function (e) {
                return setImages(e.target.result);
            };
            return reader.readAsDataURL(file);
        };
        handleDropFileSelect = function (evt) {
            evt.stopPropagation();
            evt.preventDefault();
            if (evt.originalEvent.dataTransfer.files[0] !== void 0) {
                if (!fileAllowed(evt.originalEvent.dataTransfer.files[0].name)) {
                    return;
                }
                return readFile(evt.originalEvent.dataTransfer.files[0]);
            }
        };
        handleDragOver = function (e) {
            e.originalEvent.dataTransfer.dropEffect = "copy";
            e.stopPropagation();
            return e.preventDefault();
        };
        handleFileSelect = function (evt) {
            if (evt.target.files[0] !== void 0) {
                if (!fileAllowed(evt.target.files[0].name)) {
                    return;
                }
                readFile(evt.target.files[0]);
                return evt.target.value;
            }
        };
        saveCrop = function () {
            var result;
            result = $cropSandbox.get(0).toDataURL();
            //$resultIm.attr('src', result);

            $("#" + settings.id).html('<img src="' + result + '" style="width:100%;" onclick="test(' + settings.index + ');">');
            $inputAttachTo.val(result);
            
            /* Code added by Vishal Panchal [ BYPT ] */
            var canvas = document.getElementById("canvas_" + settings.id + "");
            var context = canvas.getContext('2d');
            context.setTransform(1, 0, 0, 1, 0, 0);
	    context.clearRect(0, 0, canvas.width, canvas.height);
            // Restore the transform
	    context.restore();
            /* Code ended by Vishal Panchal [ BYPT ] */
            
            return cleanImages();
        };
        $fileSelect.on('change', handleFileSelect);
        $container.on('dragover', handleDragOver);
        $container.on('drop', handleDropFileSelect);
        if (settings.proxy_path !== void 0) {
            $urlSelect.on('dragover', handleDragOver);
            $urlSelect.on('drop', handleDropFileSelect);
            $urlSelectButton.click(function () {
                var url;
                if (!$urlSelect.val().match(/^(https?:\/\/)?/)) {
                    return;
                }
                if (!fileAllowed($urlSelect.val())) {
                    return;
                }
                setLoading();
                url = settings.proxy_path.replace(/:url/, $urlSelect.val());
                return $.get(url).done(function (data) {
                    return setImages(data);
                }).fail(function (jqXNR, textStatus) {
                    $progressBar.addClass('hide');
                    return alert("Failed to load image");
                });
            });
        }
        $cancelButton.on('click', function () {
            //$("#photo_preview").html('<img width="100%" height="100%" alt="holder" src="assets/upload/avatar/default.png" onclick=test(0); data-src="holder.js/150%x150">');
            return cleanImages();
        });
        return $applyButton.on('click', function () {
            var canvasCrop = document.getElementById("canvas_" + settings.id);

            if (canvasCrop.toDataURL() == document.getElementById('blank_' + settings.id).toDataURL()) {

                bootbox.alert("<h3>Please crop the picture.</h3>");
                return false;
            }

            saveCrop();
            return $imagesContainer.modal('hide');
        });
    };

    /*
     # jQuery Awesome Cropper plugin
     #
     # Copyright 2013 8xx8, vdv73rus
     #
     # v0.0.2
     */


    $.fn.extend({
        awesomeCropper: function (options) {
            return this.each(function () {
                if ($(this).data("awesomeCropper")) {
                    if (options.remove) {
                        $(this).data("awesomeCropper").remove();
                        $(this).removeData("awesomeCropper");
                    } else {
                        $(this).data("awesomeCropper").setOptions(options);
                    }
                } else if (!options.remove) {
                    $(this).data("awesomeCropper", new $.awesomeCropper(this, options));
                }
                if (options.instance) {
                    return $(this).data("awesomeCropper");
                }
                return this;
            });
        }
    });

}).call(this);

function test(id)
{

    if (id == 0)
    {
        $(".awesome-cropper #photo_preview").click();
    } else
    {
        $(".awesome-cropper #photo_preview" + id).click();
    }
}

$(document).ready(function (e) {
    $("#photo_preview img").on("click", function () {
        $(".awesome-cropper #photo_preview").click();
    });

    $("#photo_preview1 img").on("click", function () {
        $(".awesome-cropper #photo_preview1").click();
    });

    $("#photo_preview2 img").on("click", function () {
        $(".awesome-cropper #photo_preview2").click();
    });

    $("#photo_preview3 img").on("click", function () {
        $(".awesome-cropper #photo_preview3").click();
    });

    $("#photo_preview4 img").on("click", function () {
        $(".awesome-cropper #photo_preview4").click();
    });



});



